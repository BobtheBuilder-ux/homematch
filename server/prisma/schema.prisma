generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

enum PropertyType {
  SelfContain
  Apartment
  Bungalow
  Duplex
}

enum ApplicationStatus {
  Pending
  Denied
  Approved
}

enum PaymentStatus {
  Pending
  Paid
  PartiallyPaid
  Overdue
}

enum PropertyStatus {
  Available
  Closed
  UnderMaintenance
  PendingApproval
}

enum WithdrawalStatus {
  Pending
  Processing
  Completed
  Failed
  Cancelled
}

enum MaritalPreference {
  Single
  Married
  Any
}

enum GenderPreference {
  Male
  Female
  Any
}

enum ChildrenPreference {
  Yes
  No
  Any
}

model Property {
  id                Int          @id @default(autoincrement())
  name              String
  description       String
  pricePerYear     Float
  securityDeposit   Float
  applicationFee    Float
  photoUrls         String[]
  videoUrl          String?
  amenities         String?
  isParkingIncluded Boolean      @default(false)
  maritalPreference MaritalPreference @default(Any)
  genderPreference  GenderPreference  @default(Any)
  childrenPreference ChildrenPreference @default(Any)
  beds              Int
  baths             Float
  squareFeet        Int
  propertyType      PropertyType
  status            PropertyStatus @default(Available)
  postedDate        DateTime     @default(now())
  locationId        Int
  landlordCognitoId  String

  location     Location      @relation(fields: [locationId], references: [id])
  landlord     Landlord      @relation(fields: [landlordCognitoId], references: [cognitoId])
  leases       Lease[]
  applications Application[]
  favoritedBy  Tenant[]      @relation("TenantFavorites")
  tenants      Tenant[]      @relation("TenantProperties")
  inspections  Inspection[]
  agentAssignments AgentProperty[]
}

model Landlord {
  id          Int    @id @default(autoincrement())
  cognitoId   String @unique
  name        String
  email       String
  phoneNumber String
  registrationCodeId Int?
  
  // Address Information
  currentAddress    String?
  city             String?
  state            String?
  country          String?
  postalCode       String?
  
  // Bank Details
  bankName         String?
  accountNumber    String?
  accountName      String?
  bankCode         String?
  
  // Business Information
  businessName     String?
  businessType     String?
  taxId            String?
  
  // Additional Information
  dateOfBirth      DateTime?
  nationality      String?
  occupation       String?
  emergencyContactName   String?
  emergencyContactPhone  String?
  
  // Onboarding Status
  isOnboardingComplete Boolean @default(false)
  onboardedAt          DateTime?
  
  // Timestamps
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now()) @updatedAt

  managedProperties Property[]
  registrationCode  LandlordRegistrationCode? @relation(fields: [registrationCodeId], references: [id])
  withdrawals       Withdrawal[]
}

model Tenant {
  id          Int    @id @default(autoincrement())
  cognitoId   String @unique
  name        String
  email       String
  phoneNumber String

  properties      Property[]       @relation("TenantProperties")
  favorites       Property[]       @relation("TenantFavorites")
  applications    Application[]
  leases          Lease[]
  inspections     Inspection[]
  inspectionLimit InspectionLimit?
}

model Agent {
  id          Int    @id @default(autoincrement())
  cognitoId   String @unique
  name        String
  email       String
  phoneNumber String?
  address     String?
  registrationCodeId Int?

  registrationCode  AgentRegistrationCode? @relation(fields: [registrationCodeId], references: [id])
  assignedTasks     Task[] @relation("AgentTasks")
  inspections       Inspection[]
  assignedProperties AgentProperty[]
}

model Admin {
  id          Int    @id @default(autoincrement())
  cognitoId   String @unique
  name        String
  email       String
  phoneNumber String?
}

model LandlordRegistrationCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  usedAt    DateTime?
  
  landlords Landlord[]
}

model AgentRegistrationCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  usedAt    DateTime?
  assignedBy String? // Admin who assigned this code
  
  agents Agent[]
}

enum TaskStatus {
  Pending
  InProgress
  Completed
  Cancelled
}

enum TaskPriority {
  Low
  Medium
  High
  Urgent
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus   @default(Pending)
  priority    TaskPriority @default(Medium)
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  assignedBy  String       // Admin who assigned the task
  agentId     Int
  
  agent Agent @relation("AgentTasks", fields: [agentId], references: [id])
}

model AgentProperty {
  id          Int      @id @default(autoincrement())
  agentId     Int
  propertyId  Int
  assignedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  agent    Agent    @relation(fields: [agentId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@unique([agentId, propertyId])
}

model Location {
  id          Int                                   @id @default(autoincrement())
  address     String
  city        String
  state       String
  country     String
  postalCode  String
  coordinates Unsupported("geography(Point, 4326)")

  properties Property[]
}

model Application {
  id                      Int               @id @default(autoincrement())
  applicationDate         DateTime
  status                  ApplicationStatus
  propertyId              Int
  tenantCognitoId         String
  paymentDeadline         DateTime?
  name                    String
  email                   String
  phoneNumber             String
  preferredMoveInDate     DateTime?
  desiredLeaseDuration    String?
  gender                  String?
  dateOfBirth             DateTime?
  nationality             String?
  maritalStatus           String?
  idType                  String?
  idDocumentUrl          String?
  durationAtCurrentAddress String?
  employmentStatus        String?
  occupation              String?
  employerName            String?
  workAddress             String?
  monthlyIncome           Float?
  durationAtCurrentJob    String?
  incomeProofUrl          String?
  previousEmployerName    String?
  previousJobTitle        String?
  previousEmploymentDuration String?
  reasonForLeavingPrevJob String?
  numberOfOccupants       Int?
  relationshipToOccupants String?
  hasPets                 Boolean?
  isSmoker                Boolean?
  accessibilityNeeds      String?
  reasonForLeaving        String?
  consentToInformation    Boolean?
  consentToVerification   Boolean?
  consentToTenancyTerms   Boolean?
  consentToPrivacyPolicy  Boolean?
  leaseId                 Int?              @unique

  property Property @relation(fields: [propertyId], references: [id])
  tenant   Tenant   @relation(fields: [tenantCognitoId], references: [cognitoId])
  lease    Lease?   @relation(fields: [leaseId], references: [id])
}

model Lease {
  id              Int      @id @default(autoincrement())
  startDate       DateTime
  endDate         DateTime
  rent            Float
  deposit         Float
  propertyId      Int
  tenantCognitoId String

  property    Property     @relation(fields: [propertyId], references: [id])
  tenant      Tenant       @relation(fields: [tenantCognitoId], references: [cognitoId])
  application Application?
  payments    Payment[]
}

model Payment {
  id            Int           @id @default(autoincrement())
  amountDue     Float
  amountPaid    Float
  dueDate       DateTime
  paymentDate   DateTime
  paymentStatus PaymentStatus
  leaseId       Int?

  lease Lease? @relation(fields: [leaseId], references: [id])
}

model AdminSettings {
  id                        Int     @id @default(autoincrement())
  siteName                  String  @default("HomeMatch")
  siteDescription           String  @default("Find your perfect rental property")
  allowRegistration         Boolean @default(true)
  maxPropertiesPerLandlord  Int     @default(50)
  commissionRate            Float   @default(5.0)
  emailNotifications        Boolean @default(true)
  smsNotifications          Boolean @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model TenantSurvey {
  id                        Int      @id @default(autoincrement())
  fullName                  String
  email                     String
  currentLocation           String
  rentingStatus             String
  housingType               String[]
  frustrations              String[]
  scamExperience            String
  scamDetails               String?
  propertyListingRating     String
  dashboardRating           String
  maintenanceRating         String
  rentCollectionRating      String
  customerSupportRating     String
  monthlyReportRating       String
  wishEasier                String
  launchNotification        String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model LandlordSurvey {
  id                        Int      @id @default(autoincrement())
  fullName                  String
  email                     String
  propertyLocation          String
  numberOfProperties        String
  propertyTypes             String[]
  tenantManagement          String[]
  biggestChallenges         String[]
  agentIssues               String
  platformInterest          String
  propertyListingRating     String
  dashboardRating           String
  maintenanceRating         String
  rentCollectionRating      String
  customerSupportRating     String
  monthlyReportRating       String
  wishEasier                String
  launchNotification        String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model EmailSubscription {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  fullName      String
  subscriptionType String // "tenant_survey", "landlord_survey", "newsletter", etc.
  isActive      Boolean  @default(true)
  subscribedAt  DateTime @default(now())
  unsubscribedAt DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum InspectionStatus {
  Pending
  Approved
  Rejected
  Completed
  Cancelled
}

model Inspection {
  id                Int              @id @default(autoincrement())
  propertyId        Int
  tenantCognitoId   String
  scheduledDate     DateTime
  status            InspectionStatus @default(Pending)
  tenantName        String
  tenantEmail       String
  tenantPhone       String
  preferredTime     String
  message           String?
  adminNotes        String?
  agentId           Int?
  depositPaid       Boolean          @default(false)
  depositAmount     Float?
  paymentReference  String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  property Property @relation(fields: [propertyId], references: [id])
  tenant   Tenant   @relation(fields: [tenantCognitoId], references: [cognitoId])
  agent    Agent?   @relation(fields: [agentId], references: [id])
}

model InspectionLimit {
  id              Int      @id @default(autoincrement())
  tenantCognitoId String   @unique
  freeInspections Int      @default(2)
  usedInspections Int      @default(0)
  hasUnlimited    Boolean  @default(false)
  unlimitedUntil  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantCognitoId], references: [cognitoId])
}

model Withdrawal {
  id                Int              @id @default(autoincrement())
  amount            Float
  status            WithdrawalStatus @default(Pending)
  requestDate       DateTime         @default(now())
  processedDate     DateTime?
  landlordCognitoId String
  bankName          String?
  accountNumber     String?
  accountName       String?
  reference         String?          @unique
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  landlord Landlord @relation(fields: [landlordCognitoId], references: [cognitoId])
}

// Job Application System Models
enum JobType {
  FullTime
  PartTime
  Contract
  Internship
  Remote
}

enum JobApplicationStatus {
  Submitted
  UnderReview
  Shortlisted
  Interviewed
  Rejected
  Hired
}

enum ExperienceLevel {
  Entry
  Junior
  Mid
  Senior
  Lead
  Executive
}

model Job {
  id              Int             @id @default(autoincrement())
  title           String
  description     String
  requirements    String
  responsibilities String
  jobType         JobType
  experienceLevel ExperienceLevel
  salaryMin       Float?
  salaryMax       Float?
  location        String
  department      String?
  isActive        Boolean         @default(true)
  postedDate      DateTime        @default(now())
  closingDate     DateTime?
  createdBy       String          // Admin cognitoId
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  applications JobApplication[]
}

model JobApplication {
  id                Int                   @id @default(autoincrement())
  jobId             Int
  applicantName     String
  applicantEmail    String
  applicantPhone    String?
  resumeUrl         String
  coverLetter       String?
  experience        String?
  education         String?
  skills            String?
  portfolioUrl      String?
  linkedinUrl       String?
  status            JobApplicationStatus @default(Submitted)
  submittedAt       DateTime             @default(now())
  reviewedAt        DateTime?
  reviewedBy        String?              // Admin cognitoId
  notes             String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  job     Job                    @relation(fields: [jobId], references: [id])
  ratings JobApplicationRating[]
}

model JobApplicationRating {
  id                  Int    @id @default(autoincrement())
  jobApplicationId    Int
  criteriaName        String
  score              Int    // 1-10 scale
  maxScore           Int    @default(10)
  weight             Float  @default(1.0)
  comments           String?
  ratedBy            String // Admin cognitoId
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  jobApplication JobApplication @relation(fields: [jobApplicationId], references: [id])

  @@unique([jobApplicationId, criteriaName])
}

// Notification System Models
enum NotificationType {
  PropertyUpdate
  ApplicationStatus
  PaymentReminder
  InspectionScheduled
  LeaseExpiring
  MaintenanceRequest
  SystemAlert
  Welcome
  General
}

enum NotificationPriority {
  Low
  Medium
  High
  Urgent
}

model Notification {
  id          Int                  @id @default(autoincrement())
  title       String
  message     String
  type        NotificationType
  priority    NotificationPriority @default(Medium)
  isRead      Boolean              @default(false)
  recipientId String               // Cognito ID
  recipientType String             // "landlord", "tenant", "agent", "admin"
  relatedId   Int?                 // ID of related entity (property, application, etc.)
  relatedType String?              // Type of related entity
  actionUrl   String?              // URL for action button
  actionText  String?              // Text for action button
  metadata    Json?                // Additional data
  expiresAt   DateTime?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

// Activity Feed Models
enum ActivityType {
  PropertyCreated
  PropertyUpdated
  PropertyDeleted
  ApplicationSubmitted
  ApplicationApproved
  ApplicationDenied
  LeaseCreated
  LeaseExpired
  PaymentMade
  PaymentOverdue
  InspectionScheduled
  InspectionCompleted
  TenantRegistered
  LandlordRegistered
  AgentAssigned
  MaintenanceRequested
  MaintenanceCompleted
  WithdrawalRequested
  WithdrawalProcessed
}

model ActivityFeed {
  id          Int          @id @default(autoincrement())
  type        ActivityType
  title       String
  description String
  actorId     String       // Cognito ID of who performed the action
  actorType   String       // "landlord", "tenant", "agent", "admin"
  actorName   String       // Name of the actor
  targetId    Int?         // ID of the target entity
  targetType  String?      // Type of target entity
  metadata    Json?        // Additional context data
  isPublic    Boolean      @default(false) // Whether visible to other users
  createdAt   DateTime     @default(now())
}
