generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

enum Highlight {
  HighSpeedInternetAccess
  WasherDryer
  AirConditioning
  Heating
  SmokeFree
  CableReady
  SatelliteTV
  DoubleVanities
  TubShower
  Intercom
  SprinklerSystem
  RecentlyRenovated
  CloseToTransit
  GreatView
  QuietNeighborhood
}

enum Amenity {
  WasherDryer
  AirConditioning
  Dishwasher
  HighSpeedInternet
  HardwoodFloors
  WalkInClosets
  Microwave
  Refrigerator
  Pool
  Gym
  Parking
  PetsAllowed
  WiFi
}

enum PropertyType {
  Rooms
  Tinyhouse
  Apartment
  Villa
  Townhouse
  Cottage
}

enum ApplicationStatus {
  Pending
  Denied
  Approved
}

enum PaymentStatus {
  Pending
  Paid
  PartiallyPaid
  Overdue
}

model Property {
  id                Int          @id @default(autoincrement())
  name              String
  description       String
  pricePerYear     Float
  securityDeposit   Float
  applicationFee    Float
  photoUrls         String[]
  amenities         Amenity[]
  highlights        Highlight[]
  isPetsAllowed     Boolean      @default(false)
  isParkingIncluded Boolean      @default(false)
  beds              Int
  baths             Float
  squareFeet        Int
  propertyType      PropertyType
  postedDate        DateTime     @default(now())
  averageRating     Float?       @default(0)
  numberOfReviews   Int?         @default(0)
  locationId        Int
  landlordCognitoId  String

  location     Location      @relation(fields: [locationId], references: [id])
  landlord     Landlord      @relation(fields: [landlordCognitoId], references: [cognitoId])
  leases       Lease[]
  applications Application[]
  favoritedBy  Tenant[]      @relation("TenantFavorites")
  tenants      Tenant[]      @relation("TenantProperties")
}

model Landlord {
  id          Int    @id @default(autoincrement())
  cognitoId   String @unique
  name        String
  email       String
  phoneNumber String
  registrationCodeId Int?

  managedProperties Property[]
  registrationCode  LandlordRegistrationCode? @relation(fields: [registrationCodeId], references: [id])
}

model Tenant {
  id          Int    @id @default(autoincrement())
  cognitoId   String @unique
  name        String
  email       String
  phoneNumber String

  properties   Property[]    @relation("TenantProperties")
  favorites    Property[]    @relation("TenantFavorites")
  applications Application[]
  leases       Lease[]
}

model Agent {
  id          Int    @id @default(autoincrement())
  cognitoId   String @unique
  name        String
  email       String
  phoneNumber String?
  registrationCodeId Int?

  registrationCode  AgentRegistrationCode? @relation(fields: [registrationCodeId], references: [id])
  assignedTasks     Task[] @relation("AgentTasks")
}

model Admin {
  id          Int    @id @default(autoincrement())
  cognitoId   String @unique
  name        String
  email       String
  phoneNumber String?
}

model LandlordRegistrationCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  usedAt    DateTime?
  
  landlords Landlord[]
}

model AgentRegistrationCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  usedAt    DateTime?
  assignedBy String? // Admin who assigned this code
  
  agents Agent[]
}

enum TaskStatus {
  Pending
  InProgress
  Completed
  Cancelled
}

enum TaskPriority {
  Low
  Medium
  High
  Urgent
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus   @default(Pending)
  priority    TaskPriority @default(Medium)
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  assignedBy  String       // Admin who assigned the task
  agentId     Int
  
  agent Agent @relation("AgentTasks", fields: [agentId], references: [id])
}

model Location {
  id          Int                                   @id @default(autoincrement())
  address     String
  city        String
  state       String
  country     String
  postalCode  String
  coordinates Unsupported("geography(Point, 4326)")

  properties Property[]
}

model Application {
  id                      Int               @id @default(autoincrement())
  applicationDate         DateTime
  status                  ApplicationStatus
  propertyId              Int
  tenantCognitoId         String
  name                    String
  email                   String
  phoneNumber             String
  preferredMoveInDate     DateTime?
  desiredLeaseDuration    String?
  gender                  String?
  dateOfBirth             DateTime?
  nationality             String?
  maritalStatus           String?
  idType                  String?
  idDocumentUrl          String?
  durationAtCurrentAddress String?
  employmentStatus        String?
  occupation              String?
  employerName            String?
  workAddress             String?
  monthlyIncome           Float?
  durationAtCurrentJob    String?
  incomeProofUrl          String?
  previousEmployerName    String?
  previousJobTitle        String?
  previousEmploymentDuration String?
  reasonForLeavingPrevJob String?
  numberOfOccupants       Int?
  relationshipToOccupants String?
  hasPets                 Boolean?
  isSmoker                Boolean?
  accessibilityNeeds      String?
  reasonForLeaving        String?
  consentToInformation    Boolean?
  consentToVerification   Boolean?
  consentToTenancyTerms   Boolean?
  consentToPrivacyPolicy  Boolean?
  leaseId                 Int?              @unique

  property Property @relation(fields: [propertyId], references: [id])
  tenant   Tenant   @relation(fields: [tenantCognitoId], references: [cognitoId])
  lease    Lease?   @relation(fields: [leaseId], references: [id])
}

model Lease {
  id              Int      @id @default(autoincrement())
  startDate       DateTime
  endDate         DateTime
  rent            Float
  deposit         Float
  propertyId      Int
  tenantCognitoId String

  property    Property     @relation(fields: [propertyId], references: [id])
  tenant      Tenant       @relation(fields: [tenantCognitoId], references: [cognitoId])
  application Application?
  payments    Payment[]
}

model Payment {
  id            Int           @id @default(autoincrement())
  amountDue     Float
  amountPaid    Float
  dueDate       DateTime
  paymentDate   DateTime
  paymentStatus PaymentStatus
  leaseId       Int

  lease Lease @relation(fields: [leaseId], references: [id])
}

model AdminSettings {
  id                        Int     @id @default(autoincrement())
  siteName                  String  @default("Rentiful")
  siteDescription           String  @default("Find your perfect rental property")
  maintenanceMode           Boolean @default(false)
  allowRegistration         Boolean @default(true)
  maxPropertiesPerLandlord  Int     @default(50)
  commissionRate            Float   @default(5.0)
  emailNotifications        Boolean @default(true)
  smsNotifications          Boolean @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model TenantSurvey {
  id                        Int      @id @default(autoincrement())
  fullName                  String
  email                     String
  currentLocation           String
  rentingStatus             String
  housingType               String[]
  frustrations              String[]
  scamExperience            String
  scamDetails               String?
  propertyListingRating     String
  dashboardRating           String
  maintenanceRating         String
  rentCollectionRating      String
  customerSupportRating     String
  monthlyReportRating       String
  wishEasier                String
  launchNotification        String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model LandlordSurvey {
  id                        Int      @id @default(autoincrement())
  fullName                  String
  email                     String
  propertyLocation          String
  numberOfProperties        String
  propertyTypes             String[]
  tenantManagement          String[]
  biggestChallenges         String[]
  agentIssues               String
  platformInterest          String
  propertyListingRating     String
  dashboardRating           String
  maintenanceRating         String
  rentCollectionRating      String
  customerSupportRating     String
  monthlyReportRating       String
  wishEasier                String
  launchNotification        String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}
